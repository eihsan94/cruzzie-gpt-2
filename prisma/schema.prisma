// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "../public/ERD.svg"
//   theme    = "forest"
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Organization {
  id          String  @id @default(cuid())
  name        String?
  companySize String?
  User        User[]
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  organizationId String?
  position       String?
  onBoarded      Boolean       @default(false)
  automations    Automation[]
  accounts       Account[]
  sessions       Session[]
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt

  @@index([organizationId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model App {
  id        String    @id @default(cuid())
  name      String    @unique
  useCases  UseCase[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model UseCase {
  id            String   @id @default(cuid())
  name          String
  logicEndpoint String   @db.Text
  trigger       Trigger?
  actions       Action[]
  apps          App[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Trigger {
  id                String             @id @default(cuid())
  appName           String
  event             String             @db.Text
  eventDescription  String             @db.Text
  oAuth2            String             @db.Text
  imageUrl          String             @db.Text
  logicEndpoint     String             @db.Text
  additionalData    String?            @db.Text
  additionalActions AdditionalAction[]
  dataOutputs       String?            @db.Text
  useCase           UseCase?           @relation(fields: [useCaseId], references: [id])
  useCaseId         String?            @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([useCaseId])
}

model Action {
  id                String             @id @default(cuid())
  appName           String
  event             String             @db.Text
  eventDescription  String             @db.Text
  oAuth2            String             @db.Text
  imageUrl          String             @db.Text
  logicEndpoint     String             @db.Text
  additionalData    String?            @db.Text
  additionalActions AdditionalAction[]
  dataOutputs       String?            @db.Text
  useCase           UseCase?           @relation(fields: [useCaseId], references: [id])
  useCaseId         String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt

  @@index([useCaseId])
}

model Automation {
  id                     String              @id @default(cuid())
  name                   String
  userId                 String?
  publish                Boolean             @default(false)
  user                   User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  automationUseCase      AutomationUseCase   @relation(fields: [automationUseCaseId], references: [id])
  automationUseCaseId    String
  automationHistory      AutomationHistory[]
  automationUseHistoryId String?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @default(now()) @updatedAt

  @@unique([automationUseCaseId])
  @@index([userId])
  @@index([automationUseCaseId])
}

model AutomationHistory {
  id           String     @id @default(cuid())
  data         String     @db.Text
  automation   Automation @relation(fields: [automationId], references: [id])
  automationId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt

  @@index([automationId])
}

model AutomationUseCase {
  id                String             @id @default(cuid())
  name              String             @db.Text
  logicEndpoint     String             @db.Text
  automationId      String?
  Automation        Automation?
  automationTrigger AutomationTrigger?
  automationActions AutomationAction[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt

  @@index([automationId])
}

model AutomationTrigger {
  id                  String             @id @default(cuid())
  appName             String
  event               String             @db.Text
  eventDescription    String             @db.Text
  oAuth2              String             @db.Text
  imageUrl            String             @db.Text
  logicEndpoint       String             @db.Text
  additionalData      String?            @db.Text
  dataOutputs         String?            @db.Text
  creds               String?            @db.Text
  appChannels         AppChannel[]
  additionalActions   AdditionalAction[]
  automationUseCase   AutomationUseCase? @relation(fields: [automationUseCaseId], references: [id])
  automationUseCaseId String?            @unique
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt

  @@index([automationUseCaseId])
}

model AutomationAction {
  id                  String             @id @default(cuid())
  appName             String
  event               String             @db.Text
  eventDescription    String             @db.Text
  oAuth2              String             @db.Text
  imageUrl            String             @db.Text
  logicEndpoint       String             @db.Text
  additionalData      String?            @db.Text
  additionalActions   AdditionalAction[]
  appChannels         AppChannel[]
  dataOutputs         String?            @db.Text
  creds               String?            @db.Text
  automationUseCase   AutomationUseCase? @relation(fields: [automationUseCaseId], references: [id])
  automationUseCaseId String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt

  @@index([automationUseCaseId])
}

model AppChannel {
  id                  String             @id @default(cuid())
  name                String             @db.Text
  channelId           String             @db.Text
  automationTriggerId String?
  automationTrigger   AutomationTrigger? @relation(fields: [automationTriggerId], references: [id])
  automationActionId  String?
  automationAction    AutomationAction?  @relation(fields: [automationActionId], references: [id])
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt

  @@index([automationTriggerId])
  @@index([automationActionId])
}

model AdditionalAction {
  id                  String             @id @default(cuid())
  name                String             @db.Text
  type                String
  options             String             @db.Text
  label               String
  placeholder         String
  prefetchFnEnum      String
  value               String
  action              Action?            @relation(fields: [actionId], references: [id])
  trigger             Trigger?           @relation(fields: [triggerId], references: [id])
  automationAction    AutomationAction?  @relation(fields: [automationActionId], references: [id])
  automationTrigger   AutomationTrigger? @relation(fields: [automationTriggerId], references: [id])
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt
  automationTriggerId String?
  automationActionId  String?
  triggerId           String?
  actionId            String?

  @@index([automationTriggerId])
  @@index([automationActionId])
  @@index([triggerId])
  @@index([actionId])
}
